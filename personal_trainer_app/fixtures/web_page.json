[
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": null,
  "css": "html,\nbody {\n    height: 100% !important;\n}\n.navbar{\n    display: none;\n}\n.web-footer{\n    display: none;\n}",
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 0,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": null,
  "insert_style": 1,
  "javascript": "",
  "main_section": null,
  "main_section_html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>Chat App</title>\n    <style>\n        :root {\n            --bg-primary: #000000;\n            --bg-secondary: #1a1a1a;\n            --indigo: #818cf8;\n            --purple: #a855f7;\n            --violet: #8b5cf6;\n            --text-primary: #ffffff;\n            --text-secondary: #9ca3af;\n            --sent-message-bg: #8b5cf6;\n            --received-message-bg: #3f3f46;\n            --border-color: #333333;\n        }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            -webkit-tap-highlight-color: transparent;\n        }\n\n        html, body {\n            height: 100%;\n            overflow: hidden;\n            background-color: var(--bg-primary);\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n            color: var(--text-primary);\n            display: flex;\n            position: fixed;\n            width: 100%;\n            top: 0;\n            left: 0;\n            overscroll-behavior: none;\n        }\n\n        .sidebar {\n            width: 300px;\n            background-color: var(--bg-secondary);\n            border-right: 1px solid var(--border-color);\n            overflow-y: auto;\n            display: flex;\n            flex-direction: column;\n            transition: transform 0.3s ease;\n            z-index: 1000;\n        }\n\n        .chat-room {\n            padding: 15px 20px;\n            cursor: pointer;\n            border-bottom: 1px solid var(--border-color);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            transition: background-color 0.2s;\n            min-height: 70px;\n        }\n\n        .chat-room:hover {\n            background-color: #2a2a2a;\n        }\n\n        .chat-room.active {\n            background-color: #2d2d2d;\n        }\n\n        .chat-room-name {\n            font-weight: 500;\n            font-size: 15px;\n            color: var(--text-primary);\n        }\n\n        .unread-badge {\n            background-color: var(--violet);\n            color: white;\n            border-radius: 12px;\n            padding: 2px 8px;\n            font-size: 12px;\n            display: none;\n            font-weight: bold;\n            min-width: 20px;\n            text-align: center;\n        }\n\n        .unread-badge.show {\n            display: inline-block;\n        }\n\n        .main-chat {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            background-color: var(--bg-primary);\n            position: relative;\n            height: 100vh;\n            overflow: hidden;\n        }\n\n        .chat-header {\n            height: 70px;\n            background-color: var(--bg-secondary);\n            border-bottom: 1px solid var(--border-color);\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 0 20px;\n            position: relative;\n            z-index: 10;\n            flex-shrink: 0;\n        }\n\n        .menu-toggle {\n            display: none;\n            background: none;\n            border: none;\n            color: var(--text-primary);\n            font-size: 24px;\n            cursor: pointer;\n            padding: 10px;\n            position: relative;\n        }\n\n        .menu-badge {\n            position: absolute;\n            top: 2px;\n            right: 2px;\n            background-color: var(--violet);\n            color: white;\n            border-radius: 50%;\n            min-width: 18px;\n            height: 18px;\n            font-size: 11px;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            padding: 2px 4px;\n            line-height: 1;\n        }\n\n        .menu-badge.show {\n            display: flex;\n        }\n\n        .messages-container {\n            flex: 1;\n            overflow-y: auto;\n            padding: 20px;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            background-color: var(--bg-primary);\n            position: relative;\n            height: calc(100vh - 140px);\n            padding-bottom: calc(20px + env(safe-area-inset-bottom));\n        }\n\n        .message-wrapper {\n            display: flex;\n            flex-direction: column;\n            gap: 4px;\n            max-width: 70%;\n            opacity: 1;\n            transform: translateY(0);\n        }\n\n        .message-wrapper.sent {\n            align-self: flex-end;\n        }\n\n        .message-wrapper.received {\n            align-self: flex-start;\n        }\n\n        .message {\n            padding: 12px 16px;\n            border-radius: 20px;\n            word-wrap: break-word;\n            font-size: 15px;\n            line-height: 1.4;\n            position: relative;\n            color: var(--text-primary);\n        }\n\n        .message.sent {\n            background-color: var(--sent-message-bg);\n            color: white;\n            border-bottom-right-radius: 5px;\n        }\n\n        .message.received {\n            background-color: var(--received-message-bg);\n            border-bottom-left-radius: 5px;\n        }\n\n        .input-container {\n            height: 70px;\n            background-color: var(--bg-secondary);\n            border-top: 1px solid var(--border-color);\n            display: flex;\n            align-items: center;\n            padding: 0 20px;\n            position: relative;\n            z-index: 10;\n            flex-shrink: 0;\n            padding-bottom: env(safe-area-inset-bottom);\n            gap: 10px;\n        }\n\n        .message-input {\n            flex: 1;\n            padding: 12px 16px;\n            border-radius: 20px;\n            border: 1px solid var(--border-color);\n            background-color: #333;\n            color: var(--text-primary);\n            font-size: 15px;\n            transition: all 0.2s;\n        }\n\n        .message-input:focus {\n            outline: none;\n            background-color: #404040;\n            border-color: var(--violet);\n        }\n\n        .message-input:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n        }\n\n        .send-button {\n            background-color: var(--violet);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: background-color 0.2s;\n            font-size: 18px;\n        }\n\n        .send-button:hover {\n            background-color: var(--purple);\n        }\n\n        .send-button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n        }\n\n        .timestamp {\n            font-size: 11px;\n            color: var(--text-secondary);\n            margin: 2px 8px;\n        }\n\n        .message-wrapper.sent .timestamp {\n            text-align: right;\n        }\n\n        .message-wrapper.received .timestamp {\n            text-align: left;\n        }\n\n        @media (max-width: 768px) {\n            .sidebar {\n                position: fixed;\n                left: 0;\n                top: 0;\n                bottom: 0;\n                transform: translateX(-100%);\n            }\n\n            .sidebar.show {\n                transform: translateX(0);\n            }\n\n            .menu-toggle {\n                display: block;\n            }\n\n            .input-container {\n                padding-bottom: calc(10px + env(safe-area-inset-bottom));\n            }\n\n            .messages-container {\n                height: calc(100vh - 140px - env(safe-area-inset-bottom));\n            }\n\n            .message-wrapper {\n                max-width: 85%;\n            }\n\n            .chat-header {\n                padding-left: 10px;\n                padding-right: 10px;\n            }\n        }\n\n        ::-webkit-scrollbar {\n            width: 6px;\n        }\n\n        ::-webkit-scrollbar-track {\n            background: var(--bg-primary);\n        }\n\n        ::-webkit-scrollbar-thumb {\n            background: var(--border-color);\n            border-radius: 3px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n            background: #555;\n        }\n\n        @supports (padding: max(0px)) {\n            .input-container {\n                padding-bottom: max(15px, env(safe-area-inset-bottom));\n            }\n\n            .messages-container {\n                padding-bottom: max(20px, calc(20px + env(safe-area-inset-bottom)));\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"sidebar\" id=\"sidebar\"></div>\n    <div class=\"main-chat\">\n        <div class=\"chat-header\">\n            <button class=\"menu-toggle\" id=\"menuToggle\">\n                â˜°\n                <div class=\"menu-badge\" id=\"menuBadge\"></div>\n            </button>\n            <h2 id=\"current-chat-name\">Select a chat</h2>\n            <div style=\"width: 24px;\"></div>\n        </div>\n        <div class=\"messages-container\" id=\"messages\"></div>\n        <div class=\"input-container\">\n            <input type=\"text\" class=\"message-input\" id=\"messageInput\" placeholder=\"Message\" disabled>\n            <button class=\"send-button\" id=\"sendButton\" disabled>â†‘</button>\n        </div>\n    </div>\n\n    <script>\n        let currentMembership = null;\n        let chatData = {};\n\n        async function initializeSocket() {\n            if (!frappe.realtime) {\n                frappe.realtime = new frappe.RealTimeClient();\n            }\n            const socketio_port = frappe.boot.socketio_port || 9000;\n            await frappe.realtime.init(socketio_port);\n            frappe.realtime.socket.emit('join', 'website');\n            frappe.realtime.on('chat_update', fetchChats);\n            \n            await fetchChats();\n        }\n\n        function scrollToBottom(smooth = true) {\n            const messagesContainer = document.getElementById('messages');\n            messagesContainer.style.scrollBehavior = smooth ? 'smooth' : 'auto';\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n            \n            setTimeout(() => {\n                messagesContainer.style.scrollBehavior = 'smooth';\n            }, 0);\n        }\n\n        function isAtBottom() {\n            const messagesContainer = document.getElementById('messages');\n            const threshold = 100;\n            return messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < threshold;\n        }\n\n        function updateMenuBadge() {\n            const menuBadge = document.getElementById('menuBadge');\n            let totalUnread = 0;\n            \n            Object.values(chatData).forEach(data => {\n                const unreadCount = data.chats.filter(chat => \n                    chat.response === 1 && chat.read === 0\n                ).length;\n                totalUnread += unreadCount;\n            });\n            \n            if (totalUnread > 0) {\n                menuBadge.textContent = totalUnread > 99 ? '99+' : totalUnread;\n                menuBadge.classList.add('show');\n            } else {\n                menuBadge.classList.remove('show');\n            }\n        }\n\n        document.getElementById('menuToggle').addEventListener('click', () => {\n            document.getElementById('sidebar').classList.toggle('show');\n        });\n\n        document.addEventListener('click', (e) => {\n            const sidebar = document.getElementById('sidebar');\n            const menuToggle = document.getElementById('menuToggle');\n            \n            if (window.innerWidth <= 768 && \n                !sidebar.contains(e.target) && \n                e.target !== menuToggle) {\n                sidebar.classList.remove('show');\n            }\n        });\n\n        async function fetchChats() {\n            try {\n                const response = await fetch('/api/v2/method/personal_trainer_app.api.fetch_all_chats');\n                const result = await response.json();\n                chatData = result.data;\n                renderChatRooms();\n                if (currentMembership) {\n                    const wasAtBottom = isAtBottom();\n                    renderMessages();\n                    if (wasAtBottom) {\n                        scrollToBottom();\n                    }\n                }\n            } catch (error) {\n                console.error('Error fetching chats:', error);\n            }\n        }\n\n        function renderChatRooms() {\n            const sidebar = document.getElementById('sidebar');\n            sidebar.innerHTML = '';\n\n            Object.entries(chatData).forEach(([membership, data]) => {\n                const unreadCount = data.chats.filter(chat => \n                    chat.response === 1 && chat.read === 0\n                ).length;\n\n                const roomDiv = document.createElement('div');\n                roomDiv.className = `chat-room${currentMembership === membership ? ' active' : ''}`;\n                \n                const unreadBadge = document.createElement('span');\n                unreadBadge.className = 'unread-badge';\n                if (unreadCount > 0) {\n                    unreadBadge.classList.add('show');\n                }\n                unreadBadge.textContent = unreadCount;\n\n                const nameSpan = document.createElement('span');\n                nameSpan.className = 'chat-room-name';\n                nameSpan.textContent = data.client_name;\n\n                roomDiv.appendChild(nameSpan);\n                roomDiv.appendChild(unreadBadge);\n\n                roomDiv.addEventListener('click', () => {\n                    selectChatRoom(membership);\n                    if (window.innerWidth <= 768) {\n                        document.getElementById('sidebar').classList.remove('show');\n                    }\n                });\n                sidebar.appendChild(roomDiv);\n            });\n            \n            updateMenuBadge();\n        }\n\n        async function selectChatRoom(membership) {\n            currentMembership = membership;\n            const messageInput = document.getElementById('messageInput');\n            const sendButton = document.getElementById('sendButton');\n            const currentChatName = document.getElementById('current-chat-name');\n\n            messageInput.disabled = false;\n            sendButton.disabled = false;\n            currentChatName.textContent = chatData[membership].client_name;\n\n            renderChatRooms();\n            renderMessages();\n\n            await fetch(`/api/v2/method/personal_trainer_app.api.mark_chats_read?membership=${membership}&coach=1`);\n            \n            chatData[membership].chats.forEach(chat => {\n                if (chat.response === 1) chat.read = 1;\n            });\n            \n            renderChatRooms();\n            scrollToBottom(false);\n        }\n\n        function renderMessages() {\n            const messagesContainer = document.getElementById('messages');\n            messagesContainer.innerHTML = '';\n\n            if (!currentMembership) return;\n\n            chatData[currentMembership].chats.forEach((chat, index) => {\n                const wrapperDiv = document.createElement('div');\n                wrapperDiv.className = `message-wrapper ${chat.response ? 'sent' : 'received'}`;\n\n                const messageDiv = document.createElement('div');\n                messageDiv.className = `message ${chat.response ? 'sent' : 'received'}`;\n                messageDiv.textContent = chat.message;\n\n                const timestamp = new Date(chat.creation).toLocaleTimeString([], \n                    { hour: '2-digit', minute: '2-digit' }\n                );\n\n                const timeDiv = document.createElement('div');\n                timeDiv.className = 'timestamp';\n                timeDiv.textContent = timestamp;\n\n                wrapperDiv.appendChild(messageDiv);\n                wrapperDiv.appendChild(timeDiv);\n                messagesContainer.appendChild(wrapperDiv);\n\n                setTimeout(() => {\n                    wrapperDiv.style.opacity = '1';\n                    wrapperDiv.style.transform = 'translateY(0)';\n                }, index * 50);\n            });\n        }\n\n        async function sendMessage() {\n            const messageInput = document.getElementById('messageInput');\n            const message = messageInput.value.trim();\n\n            if (!message || !currentMembership) return;\n\n            try {\n                await fetch(`/api/v2/method/personal_trainer_app.api.send_chat?membership=${currentMembership}&message=${encodeURIComponent(message)}&response=1`);\n                messageInput.value = '';\n                scrollToBottom();\n            } catch (error) {\n                console.error('Error sending message:', error);\n            }\n        }\n\n        document.getElementById('messageInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n\n        document.getElementById('sendButton').addEventListener('click', sendMessage);\n\n        let resizeTimeout;\n        window.addEventListener('resize', () => {\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(() => {\n                if (window.innerWidth > 768) {\n                    document.getElementById('sidebar').classList.remove('show');\n                }\n                if (isAtBottom()) {\n                    scrollToBottom(false);\n                }\n            }, 100);\n        });\n\n        const messageInput = document.getElementById('messageInput');\n        messageInput.addEventListener('focus', () => {\n            setTimeout(() => {\n                scrollToBottom();\n            }, 300);\n        });\n\n        document.addEventListener('DOMContentLoaded', () => {\n            initializeSocket();\n\n            let lastTap = 0;\n            document.addEventListener('touchend', (e) => {\n                const now = Date.now();\n                if (now - lastTap < 500) {\n                    e.preventDefault();\n                }\n                lastTap = now;\n            });\n\n            const messagesContainer = document.getElementById('messages');\n            const options = {\n                root: messagesContainer,\n                rootMargin: '0px',\n                threshold: 0.8\n            };\n\n            const observer = new IntersectionObserver((entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        entry.target.style.opacity = '1';\n                        entry.target.style.transform = 'translateY(0)';\n                    }\n                });\n            }, options);\n\n            document.addEventListener('visibilitychange', () => {\n                if (!document.hidden && currentMembership) {\n                    fetchChats();\n                }\n            });\n\n            window.addEventListener('online', async () => {\n                if (currentMembership) {\n                    await initializeSocket();\n                }\n            });\n\n            document.body.style.overscrollBehavior = 'none';\n        });\n    </script>\n</body>\n</html>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2024-11-18 15:19:30.606828",
  "module": "Personal Trainer",
  "name": "admin-chat",
  "page_blocks": [],
  "published": 1,
  "route": "admin-chat",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "admin-chat",
  "website_sidebar": null
 }
]